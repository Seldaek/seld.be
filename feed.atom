<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jordi&#039;s Ramblings</title>
    <link href="https://seld.be/" />
    <link type="application/atom+xml" rel="self" href="https://seld.be/feed.atom" />
    <updated>2025-09-17T07:17:49+00:00</updated>
    <id>https://seld.be/feed.atom</id>
    <author>
        <name>Jordi Boggiano</name>
    </author>
                <entry>
    <id>https://seld.be/notes/narrowing-types-for-static-analysis</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/narrowing-types-for-static-analysis" />
    <title>Narrowing types for static analysis</title>
    <published>2022-08-03T14:30:00+00:00</published>
    <updated>2022-08-03T14:30:00+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">I have spent the last year moving a few big old codebases, including Composer, to PHPStan&#039;s level 8. Here are a few lessons I think I have learned in the process.



I was for a while skeptical about using the baseline feature as it seemed to me like......</summary>
    <content type="html"><![CDATA[
        <p>I have spent the last year moving a few big old codebases, including Composer, to PHPStan's level 8. Here are a few lessons I think I have learned in the process.</p>

<h3>Baseline + strict static analysis is the way to go</h3>

<p>I was for a while skeptical about using the baseline feature as it seemed to me like shoving all type errors under the rug, never to be looked at again.</p>

<p>I still believe there is some truth to this, and going back and fixing things does take a conscious effort. Yet after having gone full strict (level 8 + phpstan-strict-rules + phpstan-deprecation-rules at least) on a few projects I think it is well worth it.</p>

<p>It lets you move much quicker to a point where all new code is at least checked strictly for errors, so you can stop piling up technical debt <strong>right now</strong>. As such I would highly recommend using a baseline to increase strictness.</p>

<h3>Fix essential types as soon as possible</h3>

<p>The main struggle with a strict config + baseline approach is if you have deeply broken types in PHPDoc. Including nullability information for example wasn't so common 5-10 years ago. And maybe you changed data types entirely and forgot to update docblocks.</p>

<p>This can lead you to see many bogus error reports in static analysis when new code using these broken types is being analyzed. Every time you have to waste time figuring out whether this issue really needs fixing or not, and possibly decide to add it to the baseline as well.</p>

<p>Therefore spending some time fixing your most essential classes/types that are used throughout the project as early as possible makes a lot of sense and will save you time down the line. You can skip loading the baseline and analyze specific files to identify and fix issues in those areas that afford the greatest return on investment.</p>

<h3>Broad input types, narrow output types</h3>

<p>Being too strict on input (param types) means you can sometimes waste the consumers' time validating things which maybe don't need to be. Of course you do want to be strict enough that you don't cause bugs so this point is definitely one for the "it depends" category.</p>

<p>Being too loose on output (return type) means you will definitely waste consumers' time as they have to narrow down the types again before being able to use them.</p>

<p>As most APIs have more consumers than implementors, defining your API boundaries to accept broad types and return narrow types saves time overall.</p>

<p>This is perhaps more true for open source libraries which have even more consumers, but I think it also applies more generally to every function in every application.</p>

<h3>Split up functions to avoid returning union types</h3>

<p>Nullable return values is probably the most common kind of union type, and getting a <code>Foo|null</code> back is usually a huge pain as you will have to check for nullability before using it.</p>

<p>If possible at all it is usually better to offer multiple APIs doing the same but one of them enforcing that the returned type is <code>Foo</code>.</p>

<p>One concrete example of this in Composer would be the former <code>BaseCommand::getComposer</code> method, which is used throughout most commands to retrieve a <code>Composer\Composer</code> instance. However it quickly became obvious we sometimes were OK not getting an instance back, so a <code>bool $required = true</code> parameter was added, and when you set it to false it would change the return type to <code>Composer\Composer|null</code>.</p>

<p>This is quite a mess, and while PHPStan nowadays allows you to express the return value with <code>@return ($required is true ? Composer : Composer|null)</code> I would still not recommend doing this if you can avoid it.</p>

<p>The approach I took was to <a href="https://github.com/composer/composer/blob/d1f36f43c16750e0644020c9682dc028524cdfe9/src/Composer/Command/BaseCommand.php#L87-L132">split it up in two functions</a>, <code>tryComposer</code> (which can return null) and requireComposer (which will throw if it cannot give you a Composer instance). It allows most code to get a narrower return type and the few points where we do want to consider the null value can use <code>tryComposer</code> which mirrors the <a href="https://www.php.net/manual/en/backedenum.tryfrom.php"><code>BackedEnum::tryFrom</code></a> method to give you what you want <em>or null</em>. It also has the added benefit of leading to more readable code on the consumer side, as tryComposer hints at what it does much more than a <code>$required</code> parameter set to false.</p>

<p>Note that I would probably have named <code>requireComposer</code> <code>getComposer</code> if it wasn't for BC requirements here, as the method already existed with different semantics. It is now deprecated though.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/a-nomenclature-of-hate</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/a-nomenclature-of-hate" />
    <title>A nomenclature of hate</title>
    <published>2022-07-26T11:00:00+00:00</published>
    <updated>2022-07-26T11:00:00+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">(What feels like) a lifetime of maintaining open source projects has left me with some things to say about the haters. I&#039;m not sure why.

Trying to do a light take of it instead of getting mad, here is a post categorizing them.



Your average online......</summary>
    <content type="html"><![CDATA[
        <p>(What feels like) a lifetime of maintaining open source projects has left me with some things to say about <em>the haters</em>. I'm not sure why.</p>

<p>Trying to do a light take of it instead of getting mad, here is a post categorizing them.</p>

<h3>Raging hater</h3>

<p>Your average online troll, the raging hater just needs to empty their bile on you. Usually not worth engaging tho I've defused a few and gotten valuable feedback over the years, but it takes great amounts of patience.</p>

<h3>Verbose hater</h3>

<p>I will try to keep this one short, unlike our first hater. The verbose hater writes a book of a rant and mostly exhausts your nerves by the length of it all. There is usually a point in there somewhere but it's so tedious to get to it and once you figure it out you just don't want to help them anymore.</p>

<h3>Schrödinger's hater</h3>

<p><a href="https://twitter.com/Ocramius/status/1544369270456565762">This tweet by Marco Pivetta</a> (named and shamed here with his permission because I don't hold it against him) is a prime example of this, even though a fairly harmless one. Schrödinger's hater is angry but you're not sure about what. Right now they could both be hating themselves and just venting, or hate something you did. Until you engage them to know which it is it's likely to leave you feeling bad just in case.</p>

<p>If you can get past the initial urge to yell back at them, I find it is usually worth asking for more info.</p>

<h3>Illiterhater</h3>

<p>The illiterhater isn't really hating you, but hates to read warnings and errors. They would like you to do it for them. For some reason they can read better when they're wasting someone else's time and they will probably write a long issue and make you ask three times until they post the output that contains a warning giving the solution to their problem.</p>

<h3>The mirror hater</h3>

<p>I can tell they hate mirrors not because of their shoddy haircut but because I am pretty sure they've complained before about a customer or user of theirs not giving them any helpful info at all and yet here they are opening an issue which contains no more text than "it did not work".</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/new-jigsaw-site</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/new-jigsaw-site" />
    <title>New Jigsaw-based Site</title>
    <published>2022-04-02T13:00:00+00:00</published>
    <updated>2022-04-02T13:00:00+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">My blog was always based on some home-grown CMS I built during my studies in.. checks CV 2007-2008.

This was mostly fine but it had no markdown support and it was one more server to manage. I would like to try and write some more content here again so......</summary>
    <content type="html"><![CDATA[
        <p>My blog was always based on some home-grown CMS I built during my studies in.. <em>checks CV</em> 2007-2008.</p>

<p>This was mostly fine but it had no markdown support and it was one more server to manage. I would like to try and write some more content here again so 
I figured I should get this sorted out as a first step, because writing text in plain HTML is kind of a pain.</p>

<p>So here we are, here's my new website! It's built with <a href="https://jigsaw.tighten.com">Jigsaw</a> and hosted with GitHub pages for convenience.</p>

<p>And because it's 2022 and I wanted to play a bit with <a href="https://tailwindcss.com/">Tailwind</a>, there's a <a class="toggle-dark cursor-pointer dark:hidden inline">dark mode</a> <a class="toggle-dark cursor-pointer dark:inline hidden">light mode</a> too of course 😎.</p>

<p>Stay tuned for more content coming soon!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/developing-on-windows-in-2018</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/developing-on-windows-in-2018" />
    <title>Web Development on Windows in 2018</title>
    <published>2018-05-16T17:49:49+00:00</published>
    <updated>2018-05-16T17:49:49+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">I have been developing web apps on Windows for the last 10+ years. I ran PHP, Apache then Nginx, MySQL and Postgres, Redis and others. I dabbed in VMs at some point but was always dissatisfied with the experience so mostly this was all running natively......</summary>
    <content type="html"><![CDATA[
        <h2>Foreword</h2>

<p>I have been developing web apps on Windows for the last 10+ years. I ran PHP, Apache then Nginx, MySQL and Postgres, Redis and others. I dabbed in VMs at some point but was always dissatisfied with the experience so mostly this was all running natively on Windows. There were quirks for sure, I have used a lot of duct tape over the years.</p>

<p>All my hosting and sysadmin work is done on Linux though, so I have always felt more comfortable using command line tools from the Linux world. I have tried a variety of solutions to get those running on Windows, Cygwin was interoperability hell, Msys/MinGW was better but also had shortfalls.</p>

<p>Then a couple years ago Microsoft announced WSL (Windows Subsystem for Linux). In short it is a Windows-level implementation of the Linux system calls, allowing us to run Linux-compiled software on top of the Windows kernel. The coverage of syscalls isn't 100% yet, but as of the Windows 10 April Update released last month most things work really well for my purposes. As I recently got a new laptop I figured it was time to switch over.</p>

<h2>Hardware considerations</h2>

<p>In the last year, more and more of my Mac-using colleagues and friends have stopped making fun and started complaining, missing Esc keys and whatnot. The reasons for their anguish do not matter much, but it seems like lots of people are considering switching to Windows and/or Linux. I figured I would do a write up as it can probably help smoothen the migration process.</p>

<p>If you are looking to get a new laptop, I can only recommend <a href="https://www3.lenovo.com/us/en/laptops/thinkpad/thinkpad-t-series/c/thinkpadt">Lenovo's T-Series</a> (I just got a T480s) or the <a href="https://www3.lenovo.com/us/en/laptops/thinkpad/thinkpad-x/c/thinkpadx">X1 Carbon</a> or <a href="https://www.microsoft.com/en-us/surface/devices/surface-book-2/overview">Microsoft's own Surface Book 2</a> if portability is really important to you. Dell and Asus also seem to have a few decent machines but I have no experience there, and I would stay away from any other cheaper manufacturers if you're going to use this all day every day.</p>

<h2>Setting up a new machine</h2>

<p>First of all, depending on how you configured your machine to start with, check what your username is. If you open a terminal (open up the start menu and type PowerShell or cmd.exe/Command Prompt) you will see the prompt contains C:&#92;Users&#92;XXX - that last bit is your username, and if it doesn't please you or contains spaces or non-ASCII characters I would highly recommend <a href="https://superuser.com/a/955026">renaming your user account</a> as it will likely save you some trouble later.</p>

<p>Then the first step is to <a href="https://chocolatey.org/">install Chocolatey</a> which is a Windows package manager. Once you have that, you can install a bunch of things you will need on the Windows side.</p>

<p>I would recommend the following:</p>

<pre><code>choco install -y firefox googlechrome dropbox slack skype thunderbird notepad2-mod sysinternals xnviewmp 7zip.install foobar2000 cyberduck wox heidisql sublimetext3 vcxsrv
choco install -y clipx --version 1.0.3.9-beta --pre
choco pin add --version 1.0.3.9-beta -n=clipx
</code></pre>

<p>Go through the list and remove those you don't want obviously, but a few that you might not recognize if you haven't been using Windows are:</p>

<ul>
<li>notepad2-mod overwrites the good ol' notepad with something that's not a full blown editor but does a decent job of quickly editing a file</li>
<li>sysinternals is <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite">a set of utilities</a> for monitoring and debugging windows</li>
<li>xnviewmp is a great image viewer, IMO anyway, the one shipping with windows isn't all that bad these days depending on what you do</li>
<li>7zip handles all possible archive formats</li>
<li>foobar2000 is the best music player with the worst name, nerdy business, skip it if you gave in to music streaming</li>
<li>cyberduck does S/FTP just in case the 90s call, but also S3 browsing</li>
<li>wox is like Alfred for OSX, an app launcher, you can also use the windows key then type but I find Wox faster and more configurable</li>
<li>heidisql is a nice way to browse your MySQL/PostgreSQL database, definitely beats phpMyAdmin or the like</li>
<li>sublimetext3 my editor of choice but if you have opinions please remove it and move on, I don't care</li>
<li>vcxsrv is an X server which needs to run to be able to run GUIs from Linux, which I really only use for gitk. You can also look at <a href="https://token2shell.com/x410/">X410</a> which is a paid alternative with a bit better support if you want to run many linux apps.</li>
<li>clipx is a multiple clipboard storage which looks horrendous but is functional, if you know a better option please do tell</li>
</ul>

<p>This gives you a decent basis to get stuff done, and for backup and whatnot, please note that most apps will (and should) store their settings in <code>C:\Users\...\AppData\Roaming</code>. When migrating to a new laptop copying that over is the best way to carry over settings. Some stuff will end up in AppData&#92;Local but in theory that is only made for caches and temp files.</p>

<p>If you then want to upgrade apps, run <code>choco upgrade -y all</code> in an admin shell.</p>

<h2>Installing Ubuntu, git/ssh and a web server</h2>

<p>First of all, it's not exciting but it's a good idea to set some environment variables. Search for "Edit the environment variables" in the start menu, then in the dialog add the following User env vars:</p>

<p><code>WSLENV</code> set to <code>HOME/p</code> - this says that WSL should receive your HOME env var, /p means it's a path and should be converted to linux style path.</p>

<p><code>HOME</code> set to <code>C:\Users\XXX</code> - or whatever you want your home dir to be, but this is what makes sense from a Windows perspective.</p>

<p>Add a few paths to the <code>Path</code> environment variable (it is exported to WSL automatically). I recommend adding <code>C:\Users\XXX\bin</code> to have a place to drop exe files or scripts you want to be able to execute from anywhere, <code>C:\Users\XXX\.yarn\bin</code> if you are going to use Yarn, <code>C:\Users\XXX\.config\composer\vendor\bin</code> if you use Composer to and want to install global utils.</p>

<p>Then as it is 2018, you can get <a href="https://www.microsoft.com/en-us/store/p/ubuntu-1804/9n9tngvndl3q?rtc=1">Ubuntu 18.04</a> right from the Microsoft store. What a world we live in!</p>

<p>Now you can install <a href="https://conemu.github.io/">ConEmu</a>, which is my terminal emulator of choice. This will do the color support etc. If you install it once Ubuntu is present I think it'll default to the right thing, but if not make sure you pick <code>{Bash::bash}</code> as its startup task. That way you get to Linux-land as soon as you open it.</p>

<p>Alternatively open a new cmd.exe window and type <code>bash</code> or <code>ubuntu1804</code> to start it.</p>

<h3>Ubuntu / WSL configuration</h3>

<p>Once in a bash prompt, run <code>sudo nano /etc/passwd</code> to edit your home dir. By default it will be /home/XXX but I rather not use that as it is under the Linux filesystem and I want to be able to store as little as possible in there, so I can manage my files from Windows using my editor of choice and also make sure I have backups running etc. The Linux filesystem I treat as disposable. Anyway once in that /etc/passwd file you can look for a line like <code>XXX:x:1000:1000:,,,:/home/XXX:/bin/bash</code> with your username, change the <code>/home/XXX</code> at the end to be <code>/mnt/c/Users/XXX</code> instead, you'll thank me later. Save and exit (Ctrl-X then Y then Enter), then go on to the next file: <code>sudo nano /etc/wsl.conf</code> to edit the WSL config, and make sure that it contains this at the end:</p>

<pre><code>[automount]
enabled = true
options = "metadata"
</code></pre>

<p>Save and exit (Ctrl-X then Y then Enter), close all bash windows to make sure it "shuts down" Ubuntu and then reopen it. This metadata option means that it will let you use chmod to modify Windows files permissions from bash. That is invaluable to set up SSH correctly. You will want to have your ssh key set up just like you would on OSX or in Linux at ~/.ssh, or in Windows terms <code>%USERPROFILE%/.ssh</code>, so <code>C:\Users\XXX\.ssh</code>. Put your public/private keys in there, and ssh&#95;config if you have one. You can create the folder from the Ubuntu terminal if needed, or create it as <code>.ssh.</code> from Explorer otherwise it won't let you save it as .ssh, but the trailing dot will get trimmed. Once you got those files set up you want to make sure SSH does not flip out about file permissions. By default all files in the Windows filesystem have a 777 mode for Linux, so SSH will refuse to read your key as it is insecure. <code>chmod -R go-rwx ~/.ssh &amp;&amp; chmod 0400 ~/.ssh/id_rsa*</code> should fix that. Try to ssh in to some server if you can to verify.</p>

<h3>Web server</h3>

<p>Once that is done, time to install a web server, PHP and whatnot. You can run the commands in the Setup script at <a href="https://gist.github.com/Seldaek/fe3676f8b1ade7b9eb65abd5f5508b3a">https://gist.github.com/Seldaek/fe3676f8b1ade7b9eb65abd5f5508b3a</a>. I tried to split up the steps so it can be edited easily, but I think that should be a good base for most PHP devs at least. If you want Apache.. don't ask me :)</p>

<p>The other file accessible in the gist linked above is a .bash&#95;profile, which you can drop in <code>~/.bash_profile</code>. It adds a few aliases, and ssh-agent so that your encrypted SSH key doesn't prompt for a password every single time but only once when you open the terminal. It also contains a few helpful functions like n/subl/exp which will start notepad (or nano if editing a linux file)/sublime text/explorer but do path translation first so that if you give them a linux-style path they will receive the equivalent windows path and open the right file/directory. Note that you have to open a new terminal for that file to take effect. It's not the end all of bash configs, but it's a good start and inspiration to build upon.</p>

<p>To configure PHP and nginx, there are a few minor things I would recommend to make it run smoothly. In <code>/etc/php/7.2/fpm/pool.d/www.conf</code> you should set the following to make sure the php processes are running as your user and you don't have permission issues:</p>

<pre><code>listen = /var/run/php-fpm.sock
user = XXX
group = XXX
</code></pre>

<p>Then in <code>/etc/nginx/nginx.conf</code> inside the <code>http {}</code> block make sure you add <code>fastcgi_buffering off;</code>. That is required to make it run on WSL for now. Hopefully a future Windows version will fix it. In that same file I also add at the end of the <code>http {}</code> block an include so that I can manage all my vhost files in windows and not loose them if I decide to reset Ubuntu: <code>include /mnt/c/Users/XXX/nginx-vhosts/*.vhost;</code> - check nginx&#95;example.vhost in my gist to see how these vhosts can look like for hosting a Symfony app. What matters really is that <code>root</code> has to be a Linux-style <code>/mnt/c/..</code> path and <code>fastcgi_pass</code> should match what FPM listens to.</p>

<p>For starting up nginx, php etc you use <code>sudo service php7.2-fpm restart</code> for example. Now there is a catch here one of the issues left of WSL is that it has no init system really as it doesn't "boot" an OS per se. So you can't easily make it start services automatically in the background. You could make sure they start at the end of your .bash&#95;profile, but that slows down opening new terminals so I took the approach of adding a new file in <code>~/bin/srv</code> containing the following:</p>

<pre><code>#!/bin/bash

sudo service php7.2-fpm start
sudo service nginx start
sudo service redis-server start
</code></pre>

<p>Now as I added this bin dir to my PATH earlier, all I need to do when I start my machine is open a new terminal, run <code>srv</code> and all is well.</p>

<p>One last thing I would recommend if you care about gitk is to run <code>echo 'start "" "C:\Program Files\VcXsrv\vcxsrv.exe" -multiwindow' &gt; /mnt/c/Users/$USER/AppData/Roaming/Microsoft/Windows/Start\ Menu/Programs/Startup/VcXsrv.bat</code> to make sure VcXsrv starts automatically when you start windows, otherwise gitk won't be able to run without X server.</p>

<h3>Gotchas</h3>

<p>Since Windows is case insensitive and contains lots of uppercase paths I would also recommend adding a <code>~/.inputrc</code> file with <code>set completion-ignore-case On</code> in it. That makes bash tab completion ignore case sensitivity, which makes life much easier IMO.</p>

<p>Speaking of differences, if you create files from Windows, make sure you use LF line endings and not CRLF, or bash will trip up. Notepad2 has an easy way to change that by double clicking on LF/CR/CR+LF in the bar at the bottom.</p>

<h2>FAQ</h2>

<h3>What about MySQL/PostgreSQL?</h3>

<p>I install those in Windows and not Ubuntu, because I want the data to live in the Windows filesystem as explained above. Sockets work just fine across the OS boundary so you can connect from your Ubuntu PHP.</p>

<h3>Which Antivirus do you need?</h3>

<p>Just don't go there IMO. Windows Defender has shipped with Windows for ages now, and it's really good enough if you are not opening random .exe attachments from dodgy emails. Other antivirus software tends to hook so deep into the system that they cause instability or even introduce vulnerabilities.</p>

<h2>Conclusion</h2>

<p>That's it for the first steps. Hopefully this gets you up and running quicker than if you had to figure it all out. If anyone has specific tips please do write in the comments below. I am sure some of this can be improved.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/php-versions-stats-2018-1-edition</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/php-versions-stats-2018-1-edition" />
    <title>PHP Versions Stats - 2018.1 Edition</title>
    <published>2018-05-15T12:00:00+00:00</published>
    <updated>2018-05-15T12:00:00+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">It&#039;s stats o&#039;clock! See 2014, 2015, 2016.1, 2016.2, 2017.1 and 2017.2 for previous similar posts.

A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the packagist.org logs......</summary>
    <content type="html"><![CDATA[
        <p>It's stats o'clock! See <a href="https://seld.be/notes/my-view-of-php-version-adoption">2014</a>, <a href="https://seld.be/notes/php-versions-stats-2015-edition">2015</a>, <a href="https://seld.be/notes/php-versions-stats-2016-1-edition">2016.1</a>, <a href="https://seld.be/notes/php-versions-stats-2016-2-edition">2016.2</a>, <a href="https://seld.be/notes/php-versions-stats-2017-1-edition">2017.1</a> and <a href="https://seld.be/notes/php-versions-stats-2017-2-edition">2017.2</a> for previous similar posts.</p>

<p>A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the <a href="https://packagist.org">packagist.org</a> logs of the last month for Composer installs done by someone. Composer sends the PHP version it is running with in its <code>User-Agent</code> header, so I can use that to see which PHP versions people are using Composer with.</p>

<h2>PHP usage statistics</h2>

<h3>May 2018 (+/- diff from November 2017)</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 40px"></td> <td style="width: 70px">Grouped</td> <td style="width: 120px"></td> </tr> <tr> <td>PHP 7.2.4</td> <td>7.54%</td> <td></td> <td>PHP 7.1</td> <td>35.02% (-1.61)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 70px"></td> </tr> <tr> <td>PHP 7.1.16</td> <td>7.41%</td> <td></td> <td>PHP 7.0</td> <td>23.02% (-7.74)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 46px"></td> </tr> <tr> <td>PHP 7.0.28</td> <td>5.54%</td> <td></td> <td>PHP 7.2</td> <td>20.18% (+20.18)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 40px"></td> </tr> <tr> <td>PHP 7.1.15</td> <td>4.11%</td> <td></td> <td>PHP 5.6</td> <td>16.48% (-6.8)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 33px"></td> </tr> <tr> <td>PHP 7.2.3</td> <td>3.85%</td> <td></td> <td>PHP 5.5</td> <td>3.50% (-2.61)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 7px"></td> </tr> <tr> <td>PHP 7.1.14</td> <td>3.79%</td> <td></td> <td>PHP 5.4</td> <td>1.04% (-0.47)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 2px"></td> </tr> </table>

<p><img src="//seld.be/images/composer-2018-01.png" alt="" /></p>

<p>A few observations: PHP 7.1 is still on top but 7.2 is closing real quick with already 1/5th of users having upgraded. That's the biggest growth rate for a newly released version since I have started collecting those stats. Ubuntu 18.04 LTS ships with 7.2 so this number will likely grow even more in the coming months. 78% of people used PHP 7+ and almost 95% were using a PHP version that is still maintained, it sounds too good to be true. PHP 5.6 and 7.0 will reach <a href="http://php.net/supported-versions.php">end of life by late 2018</a> though so that's 40% of users who are in need of an upgrade if we want to keep these numbers up!</p>

<p>Here is the aggregate chart covering all my blog posts and the last five years.</p>

<p><img src="//seld.be/images/composer-graph-2018-01.png" alt="" /></p>

<h2>PHP requirements in Packages</h2>

<p>The second dataset is which versions are required by the PHP packages present on packagist. I only check the require statement in their current master version to see what the latest requirement is, and the dataset only includes packages that had commits in the last year to exclude all EOL'd projects as they don't update their requirements.</p>

<h3>PHP Requirements - Recent Master - May 2018 (+/- diff from Recent Master November 2017)</h3>

<table> <tbody> <tr><td style="width: 40px">5.2</td><td style="width: 120px">1.16% (-0.12)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 3px"></td></tr> <tr><td>5.3</td><td>15.9% (-2.85)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 32px"></td></tr> <tr><td>5.4</td><td>16.59% (-3.7)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 34px"></td></tr> <tr><td>5.5</td><td>15.52% (-3.55)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 32px"></td></tr> <tr><td>5.6</td><td>19.57% (-0.83)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 40px"></td></tr> <tr><td>7.0</td><td>19.47% (4.62)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 39px"></td></tr> <tr><td>7.1</td><td>11.15% (5.83)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 23px"></td></tr> <tr><td>7.2</td><td>0.64% (0.61)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 2px"></td></tr> </tbody></table>

<p>This is as usual lagging behind a little but PHP 7 is finally seeing some real adoption in the OSS world which is nice.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/php-versions-stats-2017-2-edition</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/php-versions-stats-2017-2-edition" />
    <title>PHP Versions Stats - 2017.2 Edition</title>
    <published>2017-11-13T10:34:37+00:00</published>
    <updated>2017-11-13T10:34:37+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">It&#039;s stats o&#039;clock! See 2014, 2015, 2016.1, 2016.2 and 2017.1 for previous similar posts.

A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the packagist.org logs of the......</summary>
    <content type="html"><![CDATA[
        <p>It's stats o'clock! See <a href="https://seld.be/notes/my-view-of-php-version-adoption">2014</a>, <a href="https://seld.be/notes/php-versions-stats-2015-edition">2015</a>, <a href="https://seld.be/notes/php-versions-stats-2016-1-edition">2016.1</a>, <a href="https://seld.be/notes/php-versions-stats-2016-2-edition">2016.2</a> and <a href="https://seld.be/notes/php-versions-stats-2017-1-edition">2017.1</a> for previous similar posts.</p>

<p>A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the <a href="https://packagist.org">packagist.org</a> logs of the last month for Composer installs done by someone. Composer sends the PHP version it is running with in its <code>User-Agent</code> header, so I can use that to see which PHP versions people are using Composer with.</p>

<h2>PHP usage statistics</h2>

<h3>November 2017 (+/- diff from May 2017)</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 40px"></td> <td style="width: 70px">Grouped</td> <td style="width: 120px"></td> </tr> <tr> <td>PHP 7.1.10</td> <td>11.63%</td> <td></td> <td>PHP 7.1</td> <td>36.63% (+18.99)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 74px"></td> </tr> <tr> <td>PHP 7.0.22</td> <td>7.95%</td> <td></td> <td>PHP 7.0</td> <td>30.76% (-5.36)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 62px"></td> </tr> <tr> <td>PHP 5.6.31</td> <td>7.38%</td> <td></td> <td>PHP 5.6</td> <td>23.28% (-8.16)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 47px"></td> </tr> <tr> <td>PHP 5.6.30</td> <td>7.23%</td> <td></td> <td>PHP 5.5</td> <td>6.11% (-4.5)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 13px"></td> </tr> <tr> <td>PHP 7.0.24</td> <td>5.45%</td> <td></td> <td>PHP 5.4</td> <td>1.51% (-1.6)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 4px"></td> </tr> <tr> <td>PHP 7.1.11</td> <td>4.55%</td> <td></td> <td>PHP 5.3</td> <td>0.76% (-0.22)</td> <td style="display: inline-block; height:9px; background: #8e8ef5; width: 2px"></td> </tr> </table>

<p><img src="//seld.be/images/composer-2017-02.png" alt="" /></p>

<p>A few observations: I find it quite incredible that PHP 7.1 is now the most used version, even though Ubuntu LTS does not yet ship with it. I don't know if it means people use Docker or alternative PPAs but regardless it is good news! For the first time since I started these blog posts, the version usage actually matches the order in which they were released, with the older ones having less and less usage. That's also great news. We have a total of 90% of installs done on PHP versions that are still maintained, which is awesome. If you are still on 5.6 or 7.0 though you only have one year of security fixes left so consider upgrading to 7.2 which should come out in the next week or two.</p>

<p>Here is the aggregate chart covering all my blog posts and the last four years.</p>

<p><img src="//seld.be/images/composer-graph-2017-02.png" alt="" /></p>

<h2>PHP requirements in Packages</h2>

<p>The second dataset is which versions are required by the PHP packages present on packagist. I only check the require statement in their current master version to see what the latest requirement is, and the dataset only includes packages that had commits in the last year to exclude all EOL'd projects as they don't update their requirements.</p>

<h3>PHP Requirements - Recent Master - November 2017 (+/- diff from Recent Master May 2017)</h3>

<table> <tbody> <tr><td style="width: 40px">5.2</td><td style="width: 120px">1.28% (-0.24)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 3px"></td></tr> <tr><td>5.3</td><td>18.75% (-4.4)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 38px"></td></tr> <tr><td>5.4</td><td>20.29% (-4.12)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 41px"></td></tr> <tr><td>5.5</td><td>19.07% (-4.63)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 39px"></td></tr> <tr><td>5.6</td><td>20.4% (3.59)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 41px"></td></tr> <tr><td>7.0</td><td>14.85% (6.12)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 30px"></td></tr> <tr><td>7.1</td><td>5.32% (3.65)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 11px"></td></tr> <tr><td>7.2</td><td>0.03% (0.03)</td><td style="display: inline-block; height:9px; background: #8e8ef5; width: 1px"></td></tr> </tbody></table>

<p>This moves at a decent pace with EOL'd versions slowly being abandoned. I still think it could go faster though ;) Please consider bumping to PHP 7.0 at the very least when you update your libraries.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/php-versions-stats-2017-1-edition</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/php-versions-stats-2017-1-edition" />
    <title>PHP Versions Stats - 2017.1 Edition</title>
    <published>2017-05-07T18:00:00+00:00</published>
    <updated>2017-05-07T18:00:00+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">It&#039;s stats o&#039;clock! See 2014, 2015, 2016.1 and 2016.2 for previous similar posts.

A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the packagist.org logs of the last month......</summary>
    <content type="html"><![CDATA[
        <p>It's stats o'clock! See <a href="https://seld.be/notes/my-view-of-php-version-adoption">2014</a>, <a href="https://seld.be/notes/php-versions-stats-2015-edition">2015</a>, <a href="https://seld.be/notes/php-versions-stats-2016-1-edition">2016.1</a> and <a href="https://seld.be/notes/php-versions-stats-2016-2-edition">2016.2</a> for previous similar posts.</p>

<p>A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the <a href="https://packagist.org">packagist.org</a> logs of the last month for Composer installs done by someone. Composer sends the PHP version it is running with in its <code>User-Agent</code> header, so I can use that to see which PHP versions people are using Composer with.</p>

<h2>PHP usage statistics</h2>

<h3>May 2017 (+/- diff from November 2016)</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 30px"></td> <td style="width: 70px">Grouped</td> <td></td> </tr> <tr> <td>PHP 5.6.30</td> <td>14.73%</td> <td></td> <td>PHP 7.0</td> <td>36.12% (+1.11)</td> </tr> <tr> <td>PHP 7.0.15</td> <td>9.53%</td> <td></td> <td>PHP 5.6</td> <td>31.44% (-6.02)</td> </tr> <tr> <td>PHP 5.5.9</td> <td>6.12%</td> <td></td> <td>PHP 7.1</td> <td>17.64% (+16.28)</td> </tr> <tr> <td>PHP 7.0.17</td> <td>6.00%</td> <td></td> <td>PHP 5.5</td> <td>10.61% (-8.32)</td> </tr> <tr> <td>PHP 7.1.3</td> <td>5.88%</td> <td></td> <td>PHP 5.4</td> <td>3.11% (-2.29)</td> </tr> <tr> <td>PHP 7.1.4</td> <td>3.65%</td> <td></td> <td>PHP 5.3</td> <td>0.98% (-0.62)</td> </tr> </table>

<p><img src="//seld.be/images/composer-2017-01.png?v2" alt="" /></p>

<p>A few observations: With a big boost of PHP 7.1 installs, PHP 7 overall now represents over 50%. 5.3/5.4 are really tiny and even 5.5 is dropping significantly which is good as it is not maintained anymore since last summer. That's a total of 85% of installs done on supported versions, which is pretty good.</p>

<p>And because a few people have asked me this recently, while HHVM usage is not included above in the graph it is at 0.36% which is a third of PHP 5.3 usage and really hardly significant. I personally think it's fine to support it still in libraries if it just works, or if the fixes involved are minor. If not then it's probably not worth the time investment.</p>

<p>Also.. since I now have quite a bit of data accumulated and the pie chart format is kind of crappy to see the evolution, here is a new chart which shows the full historical dataset!</p>

<p><img src="//seld.be/images/composer-graph-2017-01.png?v2" alt="" /></p>

<p>It is pretty interesting I think as it shows that 5.3/5.4/5.5 had people slowly migrating in bunches and the versions peaked at ~50% of the user base. On the other hand 5.6/7.0/7.1 peak around 35% which seems to indicate people are moving on faster to new versions. This is quite encouraging!</p>

<h2>PHP requirements in Packages</h2>

<p>The second dataset is which versions are required by all the PHP packages present on packagist. I only check the require statement in their current master version to see what the latest is.</p>

<h3>PHP Requirements - Current Master - May 2017 (+/- diff from November 2016)</h3>

<table> <tbody> <tr><td style="width: 40px">5.2</td><td>2.13% (-0.22)</td></tr> <tr><td>5.3</td><td>37.6% (-3.65)</td></tr> <tr><td>5.4</td><td>28.38% (-1.74)</td></tr> <tr><td>5.5</td><td>17.11% (+0.13)</td></tr> <tr><td>5.6</td><td>9.37% (+3.15)</td></tr> <tr><td>7.0</td><td>4.61% (+1.53)</td></tr> <tr><td>7.1</td><td>0.81% (+0.81)</td></tr> </tbody></table>

<p>A few observations: This is as usual moving pretty slowly. I think I can give up trying to advise for change, it doesn't seem to be working.. On the other hand it looks like Symfony is going to use 7.0 or 7.1 for it's v4 to come out later this year, so hopefully that will shake things up a bit and make more libraries also realize they can bump to PHP 7.</p>

<h3>PHP Requirements - Recent Master - May 2017 (+/- diff from Current Master November 2016)</h3>

<p>In response to Nikita's comment below I ran the requirements numbers for packages that had some sort of commit activity over the last year. This excludes all stale/done packages and looks much more encouraging, but the difference points are probably overly large because they compare to the old numbers which included everything, therefore take those with a pinch of salt, and in the next six months update I'll have more trusty numbers.</p>

<table> <tbody> <tr><td style="width: 40px">5.2</td><td>1.52% (-0.83)</td></tr> <tr><td>5.3</td><td>23.15% (-18.1)</td></tr> <tr><td>5.4</td><td>24.41% (-5.71)</td></tr> <tr><td>5.5</td><td>23.7% (+6.72)</td></tr> <tr><td>5.6</td><td>16.81% (+10.59)</td></tr> <tr><td>7.0</td><td>8.73% (+5.65)</td></tr> <tr><td>7.1</td><td>1.67% (+1.67)</td></tr> </tbody></table>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/php-versions-stats-2016-2-edition</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/php-versions-stats-2016-2-edition" />
    <title>PHP Versions Stats - 2016.2 Edition</title>
    <published>2016-11-18T10:36:35+00:00</published>
    <updated>2016-11-18T10:36:35+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">It&#039;s stats o&#039;clock! See 2014, 2015 and 2016.1 for previous similar posts.

A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the packagist.org logs of the last 28 days for......</summary>
    <content type="html"><![CDATA[
        <p>It's stats o'clock! See <a href="https://seld.be/notes/my-view-of-php-version-adoption">2014</a>, <a href="https://seld.be/notes/php-versions-stats-2015-edition">2015</a> and <a href="https://seld.be/notes/php-versions-stats-2016-1-edition">2016.1</a> for previous similar posts.</p>

<p>A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the <a href="https://packagist.org">packagist.org</a> logs of the last 28 days for Composer installs done by someone. Composer sends the PHP version it is running with in its <code>User-Agent</code> header, so I can use that to see which PHP versions people are using Composer with.</p>

<h2>PHP usage statistics</h2>

<p>I have two datasets, from May 2016 and today, which shows the progression of various versions.</p>

<h3>May 2016</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 30px"></td> <td style="width: 70px">Grouped</td> <td></td> </tr> <tr> <td>PHP 5.5.9</td> <td>11.87%</td> <td></td> <td>PHP 5.6</td> <td>39.67%</td> </tr> <tr> <td>PHP 7.0.6</td> <td>10.39%</td> <td></td> <td>PHP 5.5</td> <td>29.56%</td> </tr> <tr> <td>PHP 5.6.20</td> <td>8.41%</td> <td></td> <td>PHP 7.0</td> <td>20.24%</td> </tr> <tr> <td>PHP 5.6.21</td> <td>7.69%</td> <td></td> <td>PHP 5.4</td> <td>7.64%</td> </tr> <tr> <td>PHP 5.6.19</td> <td>4.71%</td> <td></td> <td>PHP 5.3</td> <td>2.43%</td> </tr> </table>

<h3>November 2016</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 30px"></td> <td style="width: 70px">Grouped</td> <td></td> </tr> <tr> <td>PHP 7.0.12</td> <td>8.58%</td> <td></td> <td>PHP 5.6</td> <td>37.46%</td> </tr> <tr> <td> PHP 5.5.9</td> <td>8.25%</td> <td></td> <td>PHP 7.0</td> <td>35.01%</td> </tr> <tr> <td>PHP 7.0.11</td> <td>7.62%</td> <td></td> <td>PHP 5.5</td> <td>18.93%</td> </tr> <tr> <td> PHP 7.0.8</td> <td>6.92%</td> <td></td> <td>PHP 5.4</td> <td>5.40%</td> </tr> <tr> <td>PHP 5.6.26</td> <td>6.12%</td> <td></td> <td>PHP 5.3</td> <td>1.60%</td> </tr> <tr> <td>PHP 5.6.27</td> <td>4.49%</td> <td></td> <td>PHP 7.1</td> <td>1.36%</td> </tr> </table>

<p><img src="//seld.be/images/composer-2016-02.png" alt="" /></p>

<p>A few observations: 5.3 and 5.4 at this point are gone as far as I am concerned! 5.5 still has a good presence but lost 12% in 6 months which is awesome. 5.6 basically stayed stable as I suspect people jumped from 5.5 to 7 directly probably when upgrading Ubuntu LTS. 7.0 gained 15% and is now close to being the most deployed version, 1 year after release! That should definitely encourage more libraries to require it IMO, and I hope it is good encouragement to PHP internals folks as well to see that people actually upgrade these days :) Interestingly 7.1 is almost passing 5.3 already and it isn't even released. That is probably coming from CI installs mostly but for example I already run 7.1 on my local dev environment and I hope others do too.</p>

<h2>PHP requirements in Packages</h2>

<p>The second dataset is which versions are required by all the PHP packages present on packagist. I only check the require statement in their current master version to see what the latest is.</p>

<h3>PHP Requirements - Current Master - November 2016 (+/- diff from May 2016)</h3>

<table> <tbody><tr> <td style="width: 40px">5.2</td> <td>2.35% (-0.16)</td> </tr> <tr> <td>5.3</td> <td>41.25% (-4.01)</td> </tr> <tr> <td>5.4</td> <td>30.12% (-1.57)</td> </tr> <tr> <td>5.5</td> <td>16.98% (+1.5)</td> </tr> <tr> <td>5.6</td> <td>6.22% (+2.7)</td> </tr> <tr> <td>7.0</td> <td>3.08% (+1.54)</td> </tr> </tbody></table>

<p>A few observations: I don't know how else to say this but PEOPLE COME ON! This is moving waaaay slower than people are migrating their servers, and it doesn't make any sense to me. I guess there are a lot of projects out there that are somewhat stale or stable and not really changing and that makes sense, but if you still maintain a library, don't hesitate to require 7 and bump the major release at this point. You will have more fun using all the cool features of the language instead of being stuck writing <code>array()</code>.</p>

<p>As I wrote in the last update: I would like to encourage everyone to be a bit more aggressive in bumping PHP requirements when tagging new major releases of their libs. Don't forget that the old code does not go away, it's still there to be used by people using legacy PHP versions.</p>

<p>However it seems that a lot of people here do not read and just look at the pictures, so allow me to illustrate this last point.</p>

<p><img src="//seld.be/images/update-reqs.png" alt="" /></p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/typo-squatting-and-packagist</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/typo-squatting-and-packagist" />
    <title>Typo Squatting and Packagist</title>
    <published>2016-06-29T23:20:31+00:00</published>
    <updated>2016-06-29T23:20:31+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">Earlier this month an article was published summarizing Nikolai Philipp Tschacher&#039;s thesis about typosquatting. In short typosquatting is a way to attack users of a package manager by registering a package with a name similar to a popular package, hoping......</summary>
    <content type="html"><![CDATA[
        <p>Earlier this month <a href="http://incolumitas.com/2016/06/08/typosquatting-package-managers/">an article</a> was published summarizing Nikolai Philipp Tschacher's thesis about typosquatting. In short typosquatting is a way to attack users of a package manager by registering a package with a name similar to a popular package, hoping that someone will accidentally typo the name and end up installing your version of it that contains malware.</p>

<p>The thesis mentions https://packagist.org as a good example as we use vendor namespaces:</p>

<blockquote>
  <p>&#91;...&#93; it is much more secure, if a package is named ntschacher/GoogleScraper instead of just GoogleScraper. The reason is: If the package name is misspelled and not the author name, this will not have any consequences, because the typo version cannot be registered in this namespace, since this author name is already reserved. &#91;...&#93; Because package names are much longer with two attributes, it is more likely that users will copy and paste the package name instead of remembering it.</p>
</blockquote>

<p>Despite this mitigating fact, it is still technically possible to squat the vendor name, so I wanted to take a look at our repository data and see if I could spot any bad actors. I wrote a script that basically does the following:</p>

<ul>
<li>Read the list of all vendor names which have packages with at least 1000 downloads, as the others are unlikely targets or at least low value targets.</li>
<li>Check the <a href="http://php.net/levenshtein">levenshtein distance</a> of every vendor name against all others.</li>
<li>If the distance is 1, then it checks for package names within those two vendors to see if they have any intersecting names. Those are then candidates for being typosquatters.</li>
</ul>

<p>What did I find? <a href="https://gist.github.com/Seldaek/491543d86b0d902fab9cb2b540bc85d9">21 vendor pairs</a> that conflict to some degree. Only one that looked like an actual typosquatting attempt, <code>momolog/monolog</code>, and it even had in the package description that it was a demonstration of typosquatting. I deleted it along with 5 others packages that were useless, but the others are still in place. A lot of it is just due to people renaming their vendor names, or simply people that picked similar names but don't seem to be abusing anything.</p>

<p>In the future it would be nice to automate this, or prevent the creation of vendors that are too similar to popular ones. However it is reassuring to see that there is no widespread abuse going on.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://seld.be/notes/php-versions-stats-2016-1-edition</id>
    <link type="text/html" rel="alternate" href="https://seld.be/notes/php-versions-stats-2016-1-edition" />
    <title>PHP Versions Stats - 2016.1 Edition</title>
    <published>2016-06-06T18:29:44+00:00</published>
    <updated>2016-06-06T18:29:44+00:00</updated>
    <author>
        <name>Jordi Boggiano</name>
    </author>
    <summary type="html">Last year I posted stats about PHP versions, and the year before as well, both time in November. However this year I can&#039;t wait for November as I am curious to explore the PHP7 uptake!

A quick note on methodology, because all these stats are imperfect......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://seld.be/notes/php-versions-stats-2015-edition">Last year I posted</a> stats about PHP versions, and the year before as well, both time in November. However this year I can't wait for November as I am curious to explore the PHP7 uptake!</p>

<p>A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the <a href="https://packagist.org">packagist.org</a> logs of the last 28 days for Composer installs done by someone. Composer sends the PHP version it is running with in its <code>User-Agent</code> header, so I can use that to see which PHP versions people are using Composer with.</p>

<h2>PHP usage statistics</h2>

<p>I have two datasets, from November 2015 and today, which shows the progression of various versions. Note that the previous dataset was checking for Composer updates only, while the new one includes installs as well.</p>

<h3>November 2015</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 30px"></td> <td style="width: 70px">Grouped</td> <td></td> </tr> <tr> <td>PHP 5.5.9</td> <td>29.63%</td> <td></td> <td>PHP 5.5</td> <td>50.68%</td> </tr> <tr> <td>PHP 5.6.14</td> <td>5.63%</td> <td></td> <td>PHP 5.6</td> <td>22.09%</td> </tr> <tr> <td>PHP 5.3.3</td> <td>4.60%</td> <td></td> <td>PHP 5.4</td> <td>15.86%</td> </tr> <tr> <td>PHP 5.4.45</td> <td>3.94%</td> <td></td> <td>PHP 5.3</td> <td>9.90%</td> </tr> <tr> <td>PHP 5.6.13</td> <td>3.39%</td> <td></td> <td>PHP 7.0</td> <td>1.17%</td> </tr> </table>

<h3>May 2016</h3>

<table> <tr> <td style="width: 90px">All versions</td> <td></td> <td style="width: 30px"></td> <td style="width: 70px">Grouped</td> <td></td> </tr> <tr> <td>PHP 5.5.9</td> <td>11.87%</td> <td></td> <td>PHP 5.6</td> <td>39.67%</td> </tr> <tr> <td>PHP 7.0.6</td> <td>10.39%</td> <td></td> <td>PHP 5.5</td> <td>29.56%</td> </tr> <tr> <td>PHP 5.6.20</td> <td>8.41%</td> <td></td> <td>PHP 7.0</td> <td>20.24%</td> </tr> <tr> <td>PHP 5.6.21</td> <td>7.69%</td> <td></td> <td>PHP 5.4</td> <td>7.64%</td> </tr> <tr> <td>PHP 5.6.19</td> <td>4.71%</td> <td></td> <td>PHP 5.3</td> <td>2.43%</td> </tr> </table>

<p><img src="//seld.be/images/composer-2016-01.png" alt="" />A few observations: 5.3 dropped to almost nothing which is great news! 5.4 is also down by almost 10% and is definitely on the way out. 5.5 is still big but less so, while 5.6 got a huge boost to become the main version. The big surprise is that we have 20% of PHP7 already! That is great news only six months after this major release came out.</p>

<h2>PHP requirements in Packages</h2>

<p>The second dataset is which versions are required by all the PHP packages present on packagist. I only check the require statement in their current master version to see what the latest is.</p>

<h3>PHP Requirements - Current Master - May 2016 (+/- diff from November 2015)</h3>

<table> <tbody><tr> <td style="width: 40px">5.2</td> <td>2.51% (-0.3)</td> </tr> <tr> <td>5.3</td> <td>45.26% (-6.43)</td> </tr> <tr> <td>5.4</td> <td>31.69% (-1.76)</td> </tr> <tr> <td>5.5</td> <td>15.48% (+5.29)</td> </tr> <tr> <td>5.6</td> <td>3.52% (+1.84)</td> </tr> <tr> <td>7.0</td> <td>1.54% (+1.34)</td> </tr> </tbody></table>

<p>A few observations: 5.3/5.4 are declining slowly, 5.5 is taking the bulk of it though which makes me a bit sad :) I wish there was more love for 7 now that it shipped in Ubuntu 16.04.</p>

<p>All in all, it seems like package requires are way behind actual version usage, so I would like to encourage everyone to be a bit more aggressive in bumping PHP requirements when tagging new major releases of their libs. Don't forget that the old code does not go away, it's still there to be used by people using legacy PHP versions.</p>
    ]]></content>
</entry>
    </feed>
